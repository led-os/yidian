package com.linken.ad.data;


// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here

import android.os.Build;
import android.support.annotation.NonNull;
import android.text.TextUtils;

import com.linken.newssdk.data.card.base.Card;
import com.linken.newssdk.data.card.base.CardDisplayInfo;
import com.linken.newssdk.data.card.base.ListViewItemData;
import com.linken.newssdk.utils.ContextUtils;
import com.linken.newssdk.utils.DeviceUtils;
import com.linken.newssdk.utils.EncryptUtil;
import com.linken.newssdk.utils.SystemUtil;
import com.linken.newssdk.utils.TimeUtil;

import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Id;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Transient;

@Entity
public class AdvertisementCard extends Card implements Serializable {

    @Id(autoincrement = true)
    public Long colId;
    public long aid;
    public String eid;
    public String tid;
    public String adsFrom;
    public String ex;
    public String clickMonitorUrlsStr;
    public String viewMonitorUrlsStr;
    public String dspName;
    public String adMessage;
    public int template;
    public int externalApp;
    public int showShare;
    public int playSound;
    public int reportEvent;
    public int adDuration;
    public String imageUrl;
    public String localImageFilePath;
    public int type;
    public String clickUrl;
    public String adChannelId;
    public String adChannelName;
    public String adChannelType;
    public String adChannelImage;
    public String docId;
    public String deeplinkUrl;
    public String hybridContentString;
    public String net;
    public String event;
    public long time;
    public String packageName;
    public long downloadId;
    public long expireTime;
    public long startTime;
    public int startAppStore;
    public int position;
    public int downloadStatus;
    public int downloadProgress;

    // KEEP FIELDS - put your custom fields here

    protected static final long serialVersionUID = 14L;// template29 Add "multiClickType" to jump, upgrade to 14
    public static final long BEST_SELLING_AID = 9999; //枪手好货入口fake一个AdvertisementCard， aid是9999
    public static final String[] EMPTY_STRING_ARRAY = new String[0];
    public static final String EMPTY_STRING = "";

    public static final int TYPE_NO_ACTION = -1;
    public static final int TYPE_LINK = 0;
    public static final int TYPE_CHANNEL = 1;
    public static final int TYPE_NEWS = 2;
    public static final int TYPE_VR = 3;
    public static final int TYPE_DEFAULT = -2;

    public transient int startAppStoreStatus = -1;  //记录每次startAppStore的状态

    public static final String FROM_XIAOMI = "xiaomi";
    public static final String FROM_APPX = "appx";
    public static final String FROM_LINGXI = "lingxi";

    public static final int VIEW_TYPE_DEFAULT = 0;
    public static final int VIEW_TYPE_ONCE = 1; //只报告一次

    //打开应用下载广告的不同方式
    public static final int APP_OPEN_H5 = 0;
    /**
     * 如果startAppStore==1,
     * 点击广告和“立即下载”都调起商店详情页；
     */
    public static final int APP_OPEN_APP_STORE = 1;
//    public static final int APP_OPEN_POPUP = 2;  新闻资讯3.7.6取消下载系统popup
    /**
     * 如果startAppStore==3，
     * 点击广告尝试调起miniCard；如果失败，调起商店详情页；
     * 点击“立即下载”尝试调用miniCard直接下载；如果失败，调起商店详情页；【11月发版实现】
     */
    public static final int APP_MINI_CARD_OPEN = 3;
    /**
     * Wifi环境自动下载
     * 如果startAppStore==4, 客户端则做自动下载测试；
     * 一点服务端开一个新的user bucket做自动开始下载测试；
     * 广告服务端根据user bucket，将返回广告的startAppStore赋值4；
     * 客户端判断startAppStore==4，并且是wifi环境，则开始自动下载；
     * 如果是自动下载，按照如下方式上报log
     * i.    在开始下载时，不上报APP_START_DOWNLOAD；
     * ii.   在下载完成后，同时上报APP_START_DOWNLOAD，APP_DOWNLOAD_SUCCESS；
     * iii.  如果用户中间取消了下载，则上报APP_DOWNLOAD_CANCEL；
     * iv.   如果下载失败，则上报APP_DOWNLOAD_FAIL；
     * v.    将上报log的startAppStore字段赋值4.
     * vi.   如果点击了“立即下载”，则log上报保持现有方式不变，但是将上报log的startAppStore字段赋值0
     */
    public static final int APP_MINI_CARD_TITLE_DOWNLOAD = 4;   //点title自动下载

    @Transient
    public String source;

    @Transient
    public String[] image_urls = EMPTY_STRING_ARRAY;
    ;

    @Transient
    public String[] multipleTitles = EMPTY_STRING_ARRAY;

    @Transient
    public String[] multiUrls = EMPTY_STRING_ARRAY;//图片跳转链接;

    @Transient
    public String[] bottomImageUrls = EMPTY_STRING_ARRAY;

    @Transient
    public String summary;

    @Transient
    public String[] multi_headlines = EMPTY_STRING_ARRAY;

    @Transient
    public String[] multi_subtitles = EMPTY_STRING_ARRAY;

    @Transient
    public String[] subtitle_urls = EMPTY_STRING_ARRAY;

    @Transient
    public String actionUrl;

    public transient boolean accessDeepLink = false;
    @Transient
    public String categoryName;

    @Transient
    public String iconUrl;

    @Transient
    public String appName;

    @Transient
    public String actionIcon;

    @Transient
    public String actionName;

    @Transient
    public String actionDescription;

    @Transient
    public String audioSrc;//用来区分广告的来源，目前只用在凤凰FM

    @Transient
    public int viewType = VIEW_TYPE_DEFAULT;

    @Transient
    public int viewno = 0;

    @Transient
    public String[] viewMonitorUrls = EMPTY_STRING_ARRAY;

    @Transient
    public String[] clickMonitorUrls = EMPTY_STRING_ARRAY;

    @Transient
    public String[] startDownloadMonitorUrls = EMPTY_STRING_ARRAY;

    @Transient
    public String[] finishDownloadMonitorUrls = EMPTY_STRING_ARRAY;

    @Transient
    public String[] startInstallMonitorUrls = EMPTY_STRING_ARRAY;

    @Transient
    public String[] finishInstallMonitorUrls = EMPTY_STRING_ARRAY;

    @Transient
    public String[] playMonitorUrls = EMPTY_STRING_ARRAY;

    @Transient
    public String[] finishMonitorUrls = EMPTY_STRING_ARRAY;

    @Transient
    public String[] firstMonitorUrls = EMPTY_STRING_ARRAY;

    @Transient
    public String[] midMonitorUrls = EMPTY_STRING_ARRAY;

    @Transient
    public String[] thirdMonitorUrls = EMPTY_STRING_ARRAY;

    @Transient
    public String[] s5MonitorUrls = EMPTY_STRING_ARRAY;

    @Transient
    public String[] s15MonitorUrls = EMPTY_STRING_ARRAY;

    @Transient
    public String[] s30MonitorUrls = EMPTY_STRING_ARRAY;


    //给开屏用，记录是否从正常打开、session过来、还是PUSH
//    public int session = AdConstants.SPLASH_TYPE_DEFAULT;

    //Temparoy field for expose log.
    public transient boolean view = false;

    public transient String mContentDocId;  //正文广告报docId暂存用
    public transient String wemediaId; //正文广告报自媒体ID暂存用

    @Transient
    public String adTag;//广告Tag内容，默认是"广告"

    @Transient
    public String flagColor;// 广告Tag颜色

    @Transient
    public boolean noAdTag;//目前template8，9会用到这个字段，需要隐藏广告标签
    //视频播放时使用
    @Transient
    public int videoDuration = 0;
    @Transient
    public int currentPosition = 0;
    @Transient
    public long loadingTime = 0;

    //图集使用
    @Transient
    public int viewedNum = 0;
    @Transient
    public int allNum = 0;


//    //Type 1 Move to AdvertisementCard
//    public String channel_id;
//    public String channel_name;
//    public String channel_type;
//    public String channel_image;
//
//    //Type 2 Move to AdvertisementCard
//    public String docId;

    //template 19,用于说明是否进行自动轮播
    @Transient
    public boolean isAutoplay = false;

    //template 11、111公用的活动的url，图标url和按钮名称
    @Transient
    public String huodongFormUrl = EMPTY_STRING;
    @Transient
    public String huodongIconUrl = EMPTY_STRING;

    @Transient
    public String huodongButtonName;
    //template 116配置”报名“的字段
    @Transient
    public String huodongButtonDesc;

    @Transient
    public String videoUrl;

    @Transient
    public long viewId;

    @Transient
    public boolean shouldResetViewId;

    @Transient
    public String gifUrl;
    //腾讯联盟的点击url，用于每次点击后的url重置
    @Transient
    public String tencentClickUrl;

    @Transient
    public String phoneNumber;
    //template29 四个图片跳转信息
    @Transient
    public ArrayList multiClickType;

    @Transient
    public String docSource;
    //1:跳正文页，其他：跳h5
    @Transient
    public int video_type;
    //搜索广告频道的分享图片
    @Transient
    public String shareImage;
    //拨打电话跳转类型。3：电话拨打页，0：跳h5
    @Transient
    public int button_type;

    @Transient
    public List tags;
    //背景图广告（template37）图片地址
    @Transient
    public String backgroundImagePath;

    @Transient
    public HybridContent mHybridContent;
    //腾讯联盟的广告是否已经曝光过，要求只曝光一次
    @Transient
    public boolean tencentAdHasExpose;

    public static class GalleryAdTagEntity implements Serializable {
        public static final long serialVersionUID = -7138746155033745323L;
        public int x;
        public int y;
        public String direction;
        public String content;
        public String linkUrl;
    }

    public static class MultiClickTypeEntity implements Serializable {
        public static final long serialVersionUID = -5974680818472778404L;
        public int clickType;
        public String url;
        public String deepLinkUrl;
        public String title;
        public String summary;
        public String imageUrl;
        public String channelType;
        public String docId;
        public String channelId;
        public String channelImage;
        public String channelName;
        public String logoImageUrl;
        public int width;
        public int height;
        public List<GalleryAdTagEntity> tags;
    }

    public static class HybridContent implements Serializable {
        public static final long serialVersionUID = -8927435312548979690L;
        public String ad_h5_id;
        public int is_full_screen;
        public String h5_tpl_id;
        public List<String> h5_image_url;
        public String webview_bgc;
    }
    // KEEP FIELDS END


    public AdvertisementCard() {
    }

    public AdvertisementCard(Long colId) {
        this.colId = colId;
    }

    @Generated(hash = 1318907293)
    public AdvertisementCard(Long colId, long aid, String eid, String tid, String adsFrom, String ex,
                             String clickMonitorUrlsStr, String viewMonitorUrlsStr, String dspName, String adMessage, int template,
                             int externalApp, int showShare, int playSound, int reportEvent, int adDuration, String imageUrl,
                             String localImageFilePath, int type, String clickUrl, String adChannelId, String adChannelName,
                             String adChannelType, String adChannelImage, String docId, String deeplinkUrl,
                             String hybridContentString, String net, String event, long time, String packageName, long downloadId,
                             long expireTime, long startTime, int startAppStore, int position, int downloadStatus,
                             int downloadProgress) {
        this.colId = colId;
        this.aid = aid;
        this.eid = eid;
        this.tid = tid;
        this.adsFrom = adsFrom;
        this.ex = ex;
        this.clickMonitorUrlsStr = clickMonitorUrlsStr;
        this.viewMonitorUrlsStr = viewMonitorUrlsStr;
        this.dspName = dspName;
        this.adMessage = adMessage;
        this.template = template;
        this.externalApp = externalApp;
        this.showShare = showShare;
        this.playSound = playSound;
        this.reportEvent = reportEvent;
        this.adDuration = adDuration;
        this.imageUrl = imageUrl;
        this.localImageFilePath = localImageFilePath;
        this.type = type;
        this.clickUrl = clickUrl;
        this.adChannelId = adChannelId;
        this.adChannelName = adChannelName;
        this.adChannelType = adChannelType;
        this.adChannelImage = adChannelImage;
        this.docId = docId;
        this.deeplinkUrl = deeplinkUrl;
        this.hybridContentString = hybridContentString;
        this.net = net;
        this.event = event;
        this.time = time;
        this.packageName = packageName;
        this.downloadId = downloadId;
        this.expireTime = expireTime;
        this.startTime = startTime;
        this.startAppStore = startAppStore;
        this.position = position;
        this.downloadStatus = downloadStatus;
        this.downloadProgress = downloadProgress;
    }


    public Long getColId() {
        return colId;
    }

    public void setColId(Long colId) {
        this.colId = colId;
    }

    public long getAid() {
        return aid;
    }

    public void setAid(long aid) {
        this.aid = aid;
    }

    public String getEid() {
        return eid;
    }

    public void setEid(String eid) {
        this.eid = eid;
    }

    public String getTid() {
        return tid;
    }

    public void setTid(String tid) {
        this.tid = tid;
    }

    public String getAdsFrom() {
        return adsFrom;
    }

    public void setAdsFrom(String adsFrom) {
        this.adsFrom = adsFrom;
    }

    public String getEx() {
        return ex;
    }

    public void setEx(String ex) {
        this.ex = ex;
    }

    public String getClickMonitorUrlsStr() {
        return clickMonitorUrlsStr;
    }

    public void setClickMonitorUrlsStr(String clickMonitorUrlsStr) {
        this.clickMonitorUrlsStr = clickMonitorUrlsStr;
    }

    public String getViewMonitorUrlsStr() {
        return viewMonitorUrlsStr;
    }

    public void setViewMonitorUrlsStr(String viewMonitorUrlsStr) {
        this.viewMonitorUrlsStr = viewMonitorUrlsStr;
    }

    public String getDspName() {
        return dspName;
    }

    public void setDspName(String dspName) {
        this.dspName = dspName;
    }

    public String getAdMessage() {
        return adMessage;
    }

    public void setAdMessage(String adMessage) {
        this.adMessage = adMessage;
    }

    public int getTemplate() {
        return template;
    }

    public void setTemplate(int template) {
        this.template = template;
    }

    public int getExternalApp() {
        return externalApp;
    }

    public void setExternalApp(int externalApp) {
        this.externalApp = externalApp;
    }

    public int getShowShare() {
        return showShare;
    }

    public void setShowShare(int showShare) {
        this.showShare = showShare;
    }

    public int getPlaySound() {
        return playSound;
    }

    public void setPlaySound(int playSound) {
        this.playSound = playSound;
    }

    public int getReportEvent() {
        return reportEvent;
    }

    public void setReportEvent(int reportEvent) {
        this.reportEvent = reportEvent;
    }

    public int getAdDuration() {
        return adDuration;
    }

    public void setAdDuration(int adDuration) {
        this.adDuration = adDuration;
    }

    public String getImageUrl() {
        return imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    public String getLocalImageFilePath() {
        return localImageFilePath;
    }

    public void setLocalImageFilePath(String localImageFilePath) {
        this.localImageFilePath = localImageFilePath;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public String getClickUrl() {
        return clickUrl;
    }

    public void setClickUrl(String clickUrl) {
        this.clickUrl = clickUrl;
    }

    public String getAdChannelId() {
        return adChannelId;
    }

    public void setAdChannelId(String adChannelId) {
        this.adChannelId = adChannelId;
    }

    public String getAdChannelName() {
        return adChannelName;
    }

    public void setAdChannelName(String adChannelName) {
        this.adChannelName = adChannelName;
    }

    public String getAdChannelType() {
        return adChannelType;
    }

    public void setAdChannelType(String adChannelType) {
        this.adChannelType = adChannelType;
    }

    public String getAdChannelImage() {
        return adChannelImage;
    }

    public void setAdChannelImage(String adChannelImage) {
        this.adChannelImage = adChannelImage;
    }

    public String getDocId() {
        return docId;
    }

    public void setDocId(String docId) {
        this.docId = docId;
    }

    public String getDeeplinkUrl() {
        return deeplinkUrl;
    }

    public void setDeeplinkUrl(String deeplinkUrl) {
        this.deeplinkUrl = deeplinkUrl;
    }

    public String getHybridContentString() {
        return hybridContentString;
    }

    public void setHybridContentString(String hybridContentString) {
        this.hybridContentString = hybridContentString;
    }

    public String getNet() {
        return net;
    }

    public void setNet(String net) {
        this.net = net;
    }

    public String getEvent() {
        return event;
    }

    public void setEvent(String event) {
        this.event = event;
    }

    public long getTime() {
        return time;
    }

    public void setTime(long time) {
        this.time = time;
    }

    public String getPackageName() {
        return packageName;
    }

    public void setPackageName(String packageName) {
        this.packageName = packageName;
    }

    public long getDownloadId() {
        return downloadId;
    }

    public void setDownloadId(long downloadId) {
        this.downloadId = downloadId;
    }

    public long getExpireTime() {
        return expireTime;
    }

    public void setExpireTime(long expireTime) {
        this.expireTime = expireTime;
    }

    public long getStartTime() {
        return startTime;
    }

    public void setStartTime(long startTime) {
        this.startTime = startTime;
    }

    public int getStartAppStore() {
        return startAppStore;
    }

    public void setStartAppStore(int startAppStore) {
        this.startAppStore = startAppStore;
    }

    public int getPosition() {
        return position;
    }

    public void setPosition(int position) {
        this.position = position;
    }

    public int getDownloadStatus() {
        return downloadStatus;
    }

    public void setDownloadStatus(int downloadStatus) {
        this.downloadStatus = downloadStatus;
    }

    public int getDownloadProgress() {
        return downloadProgress;
    }

    public void setDownloadProgress(int downloadProgress) {
        this.downloadProgress = downloadProgress;
    }

    // KEEP METHODS - put your custom methods here
    public static AdvertisementCard fakeBestSellingAdCard() {
        AdvertisementCard card = new AdvertisementCard();
        card.setAid(AdvertisementCard.BEST_SELLING_AID);
//        card.setAdsFrom(AdvertisementModule.getInstance().isZixunBuild() ?
//        AdvertisementCard.FROM_XIAOMI : AdvertisementCard.FROM_LINGXI);
        return card;
    }

    public static AdvertisementCard fromJSON(JSONObject json) {
        if (json == null) {
            return null;
        }

        AdvertisementCard card = null;
        try {
            card = new AdvertisementCard();
            card.contentType = Card.CARD_ADVERTISE;
            card.template = json.optInt("template", -1);
            card.mediaType = json.optInt("mtype", 0);

            card.source = json.optString("source");
            card.summary = json.optString("summary");
            card.clickUrl = preReplaceMacro(json.optString("url"));//一定要赋予clickUrl这个新字段，不然会因为集成Card出事的！！！
            if (isTencentAd(card)) {
                card.tencentClickUrl = card.clickUrl;
            }
            card.template = json.optInt("template", -1);
            if (card.template == CardDisplayInfo.AD_TEMPLATE3) {
                card.displayType = AD_TEMPLATE_3;
            } else if (card.template == CardDisplayInfo.AD_TEMPLATE4) {
                card.displayType = AD_TEMPLATE_4;
            } else if (card.template == CardDisplayInfo.AD_TEMPLATE40) {
                card.displayType = AD_TEMPLATE_40;
            } else if (card.template == CardDisplayInfo.AD_TEMPLATE15) {
                card.displayType = AD_TEMPLATE_116;
            }
            card.startAppStore = json.optInt("startAppStore", 0);

            card.videoUrl = json.optString("videoUrl");
            card.videoDuration = json.optInt("videoDuration");

            card.imageUrl = json.optString("image");//optString有default的fallback，即一个“”
            if (json.has("image_urls")) {
                card.image_urls = extractStringArray(json, "image_urls", false);
                if (card.image_urls != null && card.image_urls.length > 0) {
                    //5, 10共用模版
                    if (card.template == ListViewItemData.DISPLAY_CARD.AD_TP_10.adTemplateId) {
                        card.imageUrl = card.image_urls[0];
                    }
                }
            }

            if (json.has("multi_headlines")) {
                card.multi_headlines = extractStringArray(json, "multi_headlines", false);
            }
            if (json.has("multi_subtitles")) {
                card.multi_subtitles = extractStringArray(json, "multi_subtitles", false);
            }
            if (json.has("subtitle_urls")) {
                card.subtitle_urls = extractStringArray(json, "subtitle_urls", false);
            }

            card.title = json.optString("title");
            if (json.has("multi_titles")) {//多title的情况
                card.multipleTitles = extractStringArray(json, "multi_titles", false);
                //如果标题数目小于图片数目，用第一个标题做自动补齐
                if (card.image_urls != null && card.image_urls.length > 0) {
                    int lengthDiff = card.image_urls.length - card.multipleTitles.length;
                    card.multipleTitles = Arrays.copyOf(card.multipleTitles, card.image_urls.length);
                    for (int i = 0; i < lengthDiff; i++) {
                        card.multipleTitles[card.multipleTitles.length - i - 1] = card.multipleTitles[0];
                    }
                }
            }

            card.url = json.optString("url");
            if (json.has("multi_urls")) {
                card.multiUrls = extractStringArray(json, "multi_urls", true);
                //如果跳转链接数目小于图片数目，用第一个跳转链接做自动补齐
//                if (card.image_urls != null && card.image_urls.length > 0) {
//                    int lengthDiff = card.image_urls.length - card.multiUrls.length;
//                    card.multiUrls = Arrays.copyOf(card.multiUrls, card.image_urls.length);
//                    for (int i = 0; i < lengthDiff; i++) {
//                        card.multiUrls[card.multiUrls.length - i - 1] = card.multiUrls[0];
//                    }
//                }
            }

            if (json.has("dislike_reasons")) {
                JSONArray dislike_reasons = json.optJSONArray("dislike_reasons");
                card.dislikeReasons = new LinkedList<>();
                for (int i = 0; i < dislike_reasons.length(); i++) {
                    String reason = dislike_reasons.optString(i);
                    if (reason != null) {
                        card.dislikeReasons.add(reason);
                    }
                }
            }
            /*
            boolean debug = true;
            if (debug && (card.dislikeReasons == null || card.dislikeReasons.size() == 0)) {
                card.dislikeReasons = new LinkedList<>();
                card.dislikeReasons.add("原因1");
                card.dislikeReasons.add("原因2");
            }*/

            card.viewMonitorUrls = extractStringArray(json, "viewMonitorUrls", true);
            JSONArray viewUrls = json.optJSONArray("viewMonitorUrls");
            if (viewUrls != null) {
                card.viewMonitorUrlsStr = viewUrls.toString();//存入DB中的是urlsStr信息，所以解析的时候将其赋值
            }
            card.clickMonitorUrls = extractStringArray(json, "clickMonitorUrls", true);
            JSONArray clickUrls = json.optJSONArray("clickMonitorUrls");
            if (clickUrls != null) {
                card.clickMonitorUrlsStr = clickUrls.toString();//存入DB中的是urlsStr信息，所以解析的时候将其赋值
            }

            card.playMonitorUrls = extractStringArray(json, "playMonitorUrls", true);
            card.finishMonitorUrls = extractStringArray(json, "finishMonitorUrls", true);
            card.firstMonitorUrls = extractStringArray(json, "firstMonitorUrls", true);
            card.midMonitorUrls = extractStringArray(json, "midMonitorUrls", true);
            card.thirdMonitorUrls = extractStringArray(json, "thirdMonitorUrls", true);
            card.s5MonitorUrls = extractStringArray(json, "s5MonitorUrls", true);
            card.s15MonitorUrls = extractStringArray(json, "s15MonitorUrls", true);
            card.s30MonitorUrls = extractStringArray(json, "s30MonitorUrls", true);

            //下载安装事件
            card.startDownloadMonitorUrls = extractStringArray(json, "stdMonitorUrls", true);
            card.finishDownloadMonitorUrls = extractStringArray(json, "fidMonitorUrls", true);
            card.startInstallMonitorUrls = extractStringArray(json, "stiMonitorUrls", true);
            card.finishInstallMonitorUrls = extractStringArray(json, "fiiMonitorUrls", true);

            card.actionUrl = json.optString("actionUrl");
            card.actionIcon = json.optString("actionIcon");
            card.actionName = json.optString("actionName");
            card.actionDescription = json.optString("actionDesc");

            card.aid = json.optLong("aid");
            card.eid = json.optString("eid");
            card.tid = json.optString("tid");

            card.packageName = json.optString("pn");
            card.adsFrom = json.optString("adsfrom");
            card.ex = json.optString("ex");
            card.expireTime = json.optLong("expireTime", -1);
            card.startTime = json.optLong("startTime", -1);
            card.position = json.optInt("position");
            card.dspName = json.optString("dspname");
            card.externalApp = json.optBoolean("externalApp", true) ? 1 : 0;
            card.viewType = json.optInt("viewType", VIEW_TYPE_DEFAULT);
            card.impId = json.optString("impid", "");
            card.pageId = json.optString("pageid", "");
            card.showShare = json.optInt("show_share", 1);
            card.playSound = json.optInt("play_sound", 0);
            card.deeplinkUrl = json.optString("deepLinkUrl");
            card.categoryName = json.optString("categoryName");
            card.iconUrl = json.optString("iconUrl");
            card.appName = json.optString("appName");


            //打开频道，打开文章功能
            card.type = json.optInt("click_type", TYPE_DEFAULT);
            switch (card.type) {
                case TYPE_CHANNEL:
                    card.adChannelId = json.optString("ads_channel_id");
                    card.adChannelName = json.optString("ads_channel_name");
                    card.adChannelType = json.optString("ads_channel_type");
                    card.adChannelImage = json.optString("ads_channel_image");
                    break;
                case TYPE_NEWS:
                    card.docId = json.optString("ads_docid");
                    break;
            }


            String itemId = json.optString("itemid");

            if (TextUtils.isEmpty(itemId)) {
                card.id = card.aid + "_" + ((card.tid != null) ? card.tid : "");
            }

            card.isAutoplay = json.optInt("is_autoplay", 0) == 1;

            card.adTag = getStringWithCheckNull(json, "ads_flag");
            card.flagColor = json.optString("flag_color");
            card.noAdTag = json.optInt("no_flag", 0) == 1;

            card.huodongFormUrl = getStringWithCheckNull(json, "formUrl");
            card.huodongIconUrl = getStringWithCheckNull(json, "iconUrl");
            card.huodongButtonName = getStringWithCheckNull(json, "buttonName");
            card.huodongButtonDesc = getStringWithCheckNull(json, "buttonDesc");

            card.gifUrl = json.optString("gif_url");
            if (card.template == AD_TEMPLATE_ICON_GIF || card.template == AD_TEMPLATE_FLOATING_GIF) {
                card.imageUrl = card.gifUrl;
            }

            card.phoneNumber = json.optString("phonenumber");

            if (json.has("MultiClickType")) {
                card.multiClickType = toMultiClickType(json.optJSONArray("MultiClickType"));
            }
            card.video_type = json.optInt("video_type", 0);
            card.button_type = json.optInt("button_type", 3);
            card.hybridContentString = parseHybridContent(card, json.optJSONObject("hybrid_content"));
            card.bottomImageUrls = extractStringArray(json, "btm_image_urls", true);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return card;
    }

    public static boolean isTencentAd(AdvertisementCard card) {
        return card != null && TextUtils.equals("lianmeng", card.getAdsFrom());
    }

    public static String parseHybridContent(AdvertisementCard card, JSONObject hybridJson) {
        if (card == null && hybridJson == null) {
            return null;
        } else if (card != null && card.hybridContentString != null) {
            if (card.mHybridContent != null) {
                return card.hybridContentString;
            }
            try {
                hybridJson = new JSONObject(card.hybridContentString);
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            }
        }
        if (hybridJson != null) {
            HybridContent hybridContent = new HybridContent();
            hybridContent.ad_h5_id = hybridJson.optString("ad_h5_id");
            hybridContent.is_full_screen = hybridJson.optInt("is_full_screen");
            hybridContent.h5_tpl_id = hybridJson.optString("h5_tpl_id");
            hybridContent.webview_bgc = hybridJson.optString("webview_bgc");
            JSONArray preloadImages = hybridJson.optJSONArray("h5_image_url");
            List<String> images = new ArrayList<>();
            if (preloadImages != null && preloadImages.length() > 0) {
                for (int i = 0; i < preloadImages.length(); i++) {
                    images.add(preloadImages.optString(i));
                }
            }
            hybridContent.h5_image_url = images;
            card.mHybridContent = hybridContent;
            return hybridJson.toString();
        }
        return null;
    }

    public static String getStringWithCheckNull(JSONObject json, String fieldName) {
        String fieldValue = json.optString(fieldName);
        return TextUtils.equals("null", fieldValue) ? null : fieldValue;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        if (!super.equals(o)) return false;

        AdvertisementCard that = (AdvertisementCard) o;

        if (viewType != that.viewType) return false;
        if (aid != that.aid) return false;
        if (type != that.type) return false;
        if (source != null ? !source.equals(that.source) : that.source != null) return false;
        if (eid != null ? !eid.equals(that.eid) : that.eid != null) return false;
        if (tid != null ? !tid.equals(that.tid) : that.tid != null) return false;
        if (adsFrom != null ? !adsFrom.equals(that.adsFrom) : that.adsFrom != null) return false;
        return dspName != null ? dspName.equals(that.dspName) : that.dspName == null;
    }

    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + (source != null ? source.hashCode() : 0);
        result = 31 * result + viewType;
        result = 31 * result + (int) (aid ^ (aid >>> 32));
        result = 31 * result + (eid != null ? eid.hashCode() : 0);
        result = 31 * result + (tid != null ? tid.hashCode() : 0);
        result = 31 * result + (adsFrom != null ? adsFrom.hashCode() : 0);
        result = 31 * result + (dspName != null ? dspName.hashCode() : 0);
        result = 31 * result + type;
        return result;
    }


//    @Override
//    public String toString() {
//        return "AdvertisementCard{" +
//                "mediaType=" + mediaType +
//                ", title='" + title + '\'' +
//                ", source='" + source + '\'' +
//                ", image='" + imageUrl + '\'' +
//                ", summary='" + summary + '\'' +
//                ", url='" + clickUrl + '\'' +
//                ", template=" + template +
//                ", startAppStore=" + startAppStore +
//                ", actionUrl='" + actionUrl + '\'' +
//                ", actionIcon='" + actionIcon + '\'' +
//                ", actionName='" + actionName + '\'' +
//                ", actionDescription='" + actionDescription + '\'' +
//                ", aid=" + aid +
//                ", eid='" + eid + '\'' +
//                ", tid='" + tid + '\'' +
//                ", packageName='" + packageName + '\'' +
//                ", adsfrom='" + adsFrom + '\'' +
//                ", ex='" + ex + '\'' +
//                ", downloadId=" + downloadId +
//                ", event='" + event + '\'' +
//                ", net='" + net + '\'' +
//                ", expireTime=" + expireTime +
//                ", viewMonitorUrls=" + viewMonitorUrlsStr +
//                ", clickMonitorUrls" + clickMonitorUrlsStr +
//                '}';
//    }

//    public static String arrayToString(String[] strs) {
//        JSONArray array = new JSONArray();
//        if (strs != null) {
//            for (String str : strs) {
//                array.put(str);
//            }
//        }
//        return array.toString();
//    }
//
//    public static String[] stringToArray(String str) {
//        if(TextUtils.isEmpty(str)){
//            return new String[0];
//        }
//        try {
//            JSONArray array = new JSONArray(str);
//            if(array != null && array.length() > 0){
//                String[] strs = new String[array.length()];
//                for(int i = 0 ; i < strs.)
//            }
//        } catch (JSONException e) {
//            e.printStackTrace();
//        }
//        return new String[0];
//    }

    public boolean isNotExpired() {
        if (expireTime == -1) {
            return true;
        }
        long currentTime = System.currentTimeMillis();
        return expireTime >= TimeUtil.convertToServerTimeMillis(currentTime);
    }

    public static String getJSONString(String[] urls) {
        if (urls != null && urls.length > 0) {
            JSONArray array = new JSONArray();
            for (String s : urls) {
                array.put(s);
            }
            return array.toString();
        }
        return "";
    }

    public static String getJsonArrayStr(JSONArray jsonArray) {
        return jsonArray == null ? null : jsonArray.toString();
    }

    public static ArrayList<MultiClickTypeEntity> toMultiClickType(JSONArray array) {
        ArrayList<MultiClickTypeEntity> list = new ArrayList<>();
        for (int i = 0; i < array.length(); i++) {
            JSONObject json = array.optJSONObject(i);
            MultiClickTypeEntity multiClickEntity = new MultiClickTypeEntity();
            multiClickEntity.clickType = json.optInt("click_type", TYPE_NO_ACTION);
            multiClickEntity.url = preReplaceMacro(json.optString("url"));
            multiClickEntity.channelId = json.optString("ads_channel_id");
            multiClickEntity.channelName = json.optString("ads_channel_name");
            multiClickEntity.channelType = json.optString("ads_channel_type");
            multiClickEntity.channelImage = json.optString("ads_channel_image");
            multiClickEntity.docId = json.optString("ads_docid");
            multiClickEntity.title = json.optString("ads_title");
            multiClickEntity.summary = json.optString("ads_summary");
            multiClickEntity.imageUrl = json.optString("image");
            multiClickEntity.deepLinkUrl = json.optString("deepLinkUrl");
            multiClickEntity.logoImageUrl = json.optString("ads_logo");
            multiClickEntity.width = json.optInt("width", 0);
            multiClickEntity.height = json.optInt("height", 0);
            multiClickEntity.tags = toGalleryTags(json.optJSONArray("tags"));
            list.add(multiClickEntity);
        }
        return list;
    }

    public static List<GalleryAdTagEntity> toGalleryTags(JSONArray array) {
        if (array == null) {
            return null;
        }
        int length = array.length();
        List<GalleryAdTagEntity> entities = new ArrayList<>();
        for (int i = 0; i < length; i++) {
            JSONObject tagObj = array.optJSONObject(i);
            if (tagObj != null) {
                GalleryAdTagEntity entity = new GalleryAdTagEntity();
                entity.x = tagObj.optInt("x", -1);
                entity.y = tagObj.optInt("y", -1);
                entity.direction = tagObj.optString("direction", "left");
                entity.content = tagObj.optString("price");
                entity.linkUrl = tagObj.optString("url");
                entities.add(entity);
            }
        }
        return entities;
    }

    public static String[] extractStringArray(JSONObject json, String field, boolean isAdMonitorUrl) {
        JSONArray array = json.optJSONArray(field);
        return parseJSONString(array, isAdMonitorUrl);
    }

    public static String[] convertStringArray(String str) {
        String[] result = EMPTY_STRING_ARRAY;
        if (TextUtils.isEmpty(str)) {
            return result;
        }
        try {
            JSONArray array = new JSONArray(str);
            result = parseJSONString(array, true);
        } catch (JSONException e) {
        }
        return result;
    }

    public static String[] parseJSONString(JSONArray array, boolean isAdMonitorUrl) {
        String[] strs = EMPTY_STRING_ARRAY;
        if (array != null && array.length() > 0) {
            strs = new String[array.length()];
            int count = 0;
            for (int i = 0; i < array.length(); i++) {
                String str = array.optString(i);
                if (!TextUtils.isEmpty(str)) {
                    strs[count++] = isAdMonitorUrl ? preReplaceMacro(str) : str;
                }
            }
            if (count < array.length()) {
                String[] copy = new String[count];
                for (int j = 0; j < count; j++) {
                    copy[j] = strs[j];
                }
                strs = copy;
            }
        }
        return strs;
    }

    protected static String preReplaceMacro(@NonNull String clickUrl) {
        return hasMacroToReplace(clickUrl) ? replaceGeneralRuleStaticFields(MARCO_PREFIX + clickUrl) : clickUrl;
    }

    public static final String MARCO_PREFIX = "macro";


    public static final String APP_NAME = "yidian";


    public static String replaceGeneralRuleStaticFields(String url) {
        //替换static filed，即在解析时就可以确定的信息：
        //__OS__, __IMEI__, __MAC__, __ANDROIDID__, __AndroidID__, __TERM__, __APP__
        //__IDFA__对android端来说没有意义，跟PM商定后就不管了

        StringBuffer sb = new StringBuffer();
        Pattern pattern = Pattern.compile("__\\w+__");
        Matcher matcher = pattern.matcher(url);
        String model = "";
        try {
            model = URLEncoder.encode(Build.MODEL, "UTF-8");
        } catch (UnsupportedEncodingException e) {
        }

        while (matcher.find()) {
            String str = matcher.group();
            if (ReplaceMacro.OS.equals(str)) {
                matcher.appendReplacement(sb, "0");
            } else if (ReplaceMacro.IMEI.equals(str)) {
                matcher.appendReplacement(sb, EncryptUtil.getMD5_32(SystemUtil.getIMEI()));
            } else if (ReplaceMacro.ANDROIDID.equals(str) || ReplaceMacro.AndroidID.equals(str)) {
                matcher.appendReplacement(sb, EncryptUtil.getMD5_32(SystemUtil.getAndroidId()));
            } else if (ReplaceMacro.MAC.equals(str)) {
                String mac = getAdMasterMac();
                if (!TextUtils.isEmpty(mac)) {
                    matcher.appendReplacement(sb, mac);
                }
            } else if (ReplaceMacro.APP.equals(str)) {
                matcher.appendReplacement(sb, APP_NAME);
            } else if (ReplaceMacro.TERM.equals(str)) {
                if (!TextUtils.isEmpty(model)) {
                    matcher.appendReplacement(sb, model);
                }
            }
        }

        matcher.appendTail(sb);

        return sb.toString();
    }

    public static String getAdMasterMac() {
        String mac;
//        if (Build.VERSION.SDK_INT <= 8) {
        mac = DeviceUtils.getMac(ContextUtils.getApplicationContext());
//        } else {
//            mac = getMACAddress("eth0");
//        }
        if (!TextUtils.isEmpty(mac)) {
            mac = mac.replace(":", "");
        }
        return mac;
    }

    public static boolean hasMacroToReplace(@NonNull String url) {
        if (TextUtils.isEmpty(url)) {
            return false;
        }
        return url.contains(ReplaceMacro.IP) || url.contains(ReplaceMacro.TS)
                /*|| url.contains(ReplaceMacro.IESID)*/ || hasGeneralMacroToReplace(url);
    }

    public static boolean hasGeneralMacroToReplace(@NonNull String url) {
        if (TextUtils.isEmpty(url)) {
            return false;
        }
        return url.contains(ReplaceMacro.ANDROIDID) || url.contains(ReplaceMacro.AndroidID)
                || url.contains(ReplaceMacro.APP) || url.contains(ReplaceMacro.IMEI)
                || url.contains(ReplaceMacro.MAC) || url.contains(ReplaceMacro.OS)
                || url.contains(ReplaceMacro.TERM);
    }

    interface ReplaceMacro {
        String OS = "__OS__";
        String IP = "__IP__";
        String IMEI = "__IMEI__";
        String MAC = "__MAC__";
        String IDFA = "__IDFA__";
        String ANDROIDID = "__ANDROIDID__";
        String AndroidID = "__AndroidID__";
        String TS = "__TS__";
        String TERM = "__TERM__";
        String APP = "__APP__";
        String IESID = "__IESID__";
    }

    /**
     * hybrid页面的JSON
     *
     * @return
     * @throws JSONException
     */
    public JSONObject toHybridAdJSON() {
        if (TextUtils.isEmpty(hybridContentString)) {
            return null;
        }
        try {
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("ex", ex);
            jsonObject.put("aid", aid);
            jsonObject.put("template", template);
            jsonObject.put("expireTime", expireTime);
            jsonObject.put("title", title);
            jsonObject.put("source", source);
            jsonObject.put("appName", appName);
            jsonObject.put("phonenumber", phoneNumber);
            jsonObject.put("position", position);
            jsonObject.put("categoryName", categoryName);
            jsonObject.put("play_sound", playSound);
            jsonObject.put("hybrid_content", new JSONObject(hybridContentString));
            return jsonObject;
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * 暴露给第三方的JSON
     *
     * @return
     * @throws JSONException
     */
//    public JSONObject toExternalJSON() throws JSONException {
//        JSONObject jsonObject = new JSONObject();
//        jsonObject.put("ex", ex);
//        jsonObject.put("aid", aid);
//        jsonObject.put("ip", AdvertisementUtil.mClientIp);
//        jsonObject.put("mac_id", EncryptUtil.getMD5_32(HideAccountUtil.getMacAddres()));
//        jsonObject.put("platform", "android");
//        jsonObject.put("android_id", EncryptUtil.getMD5_32(HideAccountUtil.getAndroidId()));
//        jsonObject.put("model", Build.MODEL);
//        HipuAccount acc = GlobalDataCache.getInstance().getActiveAccount();
//        if (acc != null && !TextUtils.isEmpty(acc.utk)) {
//            jsonObject.put("utk", acc.utk);
//        }
//        jsonObject.put("app_id", CommonBusinessModule.getInstance().getOEMAppId());
//        jsonObject.put("imei", EncryptUtil.getMD5_32(HideAccountUtil.getImei()));
//        jsonObject.put("net_type", NetworkUtil.getNetworkType());
//        jsonObject.put("region", LocationUtils.getCityName());
//        jsonObject.put("cityCode", LocationUtils.getCityCode());
//        return jsonObject;
//    }
    @Override
    public void copyContent(Card card, boolean isFullCopy) {
        super.copyContent(card, isFullCopy);
        AdvertisementCard adCard = (AdvertisementCard) card;
        //基本字段拷贝，有需求自行添加
        if (isFullCopy) {
            this.colId = adCard.colId;
            this.aid = adCard.aid;
            this.eid = adCard.eid;
            this.tid = adCard.tid;
            this.adsFrom = adCard.adsFrom;
            this.ex = adCard.ex;
            this.clickMonitorUrlsStr = adCard.clickMonitorUrlsStr;
            this.viewMonitorUrlsStr = adCard.viewMonitorUrlsStr;
            this.dspName = adCard.dspName;
            this.adMessage = adCard.adMessage;
            this.template = adCard.template;
            this.externalApp = adCard.externalApp;
            this.showShare = adCard.showShare;
            this.playSound = adCard.playSound;
            this.reportEvent = adCard.reportEvent;
            this.adDuration = adCard.adDuration;
            this.imageUrl = adCard.imageUrl;
            this.localImageFilePath = adCard.localImageFilePath;
            this.type = adCard.type;
            this.clickUrl = adCard.clickUrl;
            this.adChannelId = adCard.adChannelId;
            this.adChannelName = adCard.adChannelName;
            this.adChannelType = adCard.adChannelType;
            this.adChannelImage = adCard.adChannelImage;
            this.docId = adCard.docId;
            this.net = adCard.net;
            this.event = adCard.event;
            this.time = adCard.time;
            this.packageName = adCard.packageName;
            this.downloadId = adCard.downloadId;
            this.expireTime = adCard.expireTime;
            this.startAppStore = adCard.startAppStore;
            this.position = adCard.position;
            this.downloadStatus = adCard.downloadStatus;
            this.downloadProgress = adCard.downloadProgress;
            this.deeplinkUrl = adCard.deeplinkUrl;
            this.mHybridContent = adCard.mHybridContent;
        }
    }

    public List<GalleryAdTagEntity> getTags() {
        return tags;
    }

    public void setTags(List<GalleryAdTagEntity> tags) {
        this.tags = tags;
    }
//
//    public Long getAid(long defaultAid) {
//        return aid == null ? defaultAid : aid;
//    }
//
//    public Integer getTemplate(int defaultTemplate) {
//        return template == null ? defaultTemplate : template;
//    }
//
//    public Integer getExternalApp(int externalApp) {
//        return externalApp;
//    }
//
//    public Integer getShowShare() {
//        return showShare;
//    }
//
//    public Integer getPlaySound(int defaultPlaySound) {
//        return playSound == null ? defaultPlaySound : playSound;
//    }
//
//    public Integer getReportEvent(int defaultReportEvent) {
//        return reportEvent == null ? defaultReportEvent : reportEvent;
//    }
//
//    public Long getTime(long defaultTime) {
//        return time == null ? defaultTime : time;
//    }
//
//    public Long getDownloadId(long defaultDownloadId) {
//        return downloadId == null ? defaultDownloadId : downloadId;
//    }
//
//    public Long getExpireTime(long defaultExpiredTime) {
//        return expireTime == null ? defaultExpiredTime : expireTime;
//    }
//
//    public Integer getStartAppStore(int defualtStartAppStore) {
//        return startAppStore == null ? defualtStartAppStore : startAppStore;
//    }
//
//    public Integer getPosition(int defaultPos) {
//        return position == null ? defaultPos : position;
//    }
//
//    public Integer getDownloadStatus(int defaultDownloadStatus) {
//        return downloadStatus == null ? defaultDownloadStatus : downloadStatus;
//    }
//
//    public Integer getDownloadProgress(int defaultDownloadProgress) {
//        return downloadProgress == null ? defaultDownloadProgress : downloadProgress;
//    }
    // KEEP METHODS END

}
