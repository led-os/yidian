package com.linken.ad.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADVERTISEMENT_CARD".
*/
public class AdvertisementCardDao extends AbstractDao<AdvertisementCard, Long> {

    public static final String TABLENAME = "ADVERTISEMENT_CARD";

    /**
     * Properties of entity AdvertisementCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ColId = new Property(0, Long.class, "colId", true, "COL_ID");
        public final static Property Aid = new Property(1, long.class, "aid", false, "AID");
        public final static Property Eid = new Property(2, String.class, "eid", false, "EID");
        public final static Property Tid = new Property(3, String.class, "tid", false, "TID");
        public final static Property AdsFrom = new Property(4, String.class, "adsFrom", false, "ADS_FROM");
        public final static Property Ex = new Property(5, String.class, "ex", false, "EX");
        public final static Property ClickMonitorUrlsStr = new Property(6, String.class, "clickMonitorUrlsStr", false, "CLICK_MONITOR_URLS_STR");
        public final static Property ViewMonitorUrlsStr = new Property(7, String.class, "viewMonitorUrlsStr", false, "VIEW_MONITOR_URLS_STR");
        public final static Property DspName = new Property(8, String.class, "dspName", false, "DSP_NAME");
        public final static Property AdMessage = new Property(9, String.class, "adMessage", false, "AD_MESSAGE");
        public final static Property Template = new Property(10, int.class, "template", false, "TEMPLATE");
        public final static Property ExternalApp = new Property(11, int.class, "externalApp", false, "EXTERNAL_APP");
        public final static Property ShowShare = new Property(12, int.class, "showShare", false, "SHOW_SHARE");
        public final static Property PlaySound = new Property(13, int.class, "playSound", false, "PLAY_SOUND");
        public final static Property ReportEvent = new Property(14, int.class, "reportEvent", false, "REPORT_EVENT");
        public final static Property AdDuration = new Property(15, int.class, "adDuration", false, "AD_DURATION");
        public final static Property ImageUrl = new Property(16, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property LocalImageFilePath = new Property(17, String.class, "localImageFilePath", false, "LOCAL_IMAGE_FILE_PATH");
        public final static Property Type = new Property(18, int.class, "type", false, "TYPE");
        public final static Property ClickUrl = new Property(19, String.class, "clickUrl", false, "CLICK_URL");
        public final static Property AdChannelId = new Property(20, String.class, "adChannelId", false, "AD_CHANNEL_ID");
        public final static Property AdChannelName = new Property(21, String.class, "adChannelName", false, "AD_CHANNEL_NAME");
        public final static Property AdChannelType = new Property(22, String.class, "adChannelType", false, "AD_CHANNEL_TYPE");
        public final static Property AdChannelImage = new Property(23, String.class, "adChannelImage", false, "AD_CHANNEL_IMAGE");
        public final static Property DocId = new Property(24, String.class, "docId", false, "DOC_ID");
        public final static Property DeeplinkUrl = new Property(25, String.class, "deeplinkUrl", false, "DEEPLINK_URL");
        public final static Property HybridContentString = new Property(26, String.class, "hybridContentString", false, "HYBRID_CONTENT_STRING");
        public final static Property Net = new Property(27, String.class, "net", false, "NET");
        public final static Property Event = new Property(28, String.class, "event", false, "EVENT");
        public final static Property Time = new Property(29, long.class, "time", false, "TIME");
        public final static Property PackageName = new Property(30, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property DownloadId = new Property(31, long.class, "downloadId", false, "DOWNLOAD_ID");
        public final static Property ExpireTime = new Property(32, long.class, "expireTime", false, "EXPIRE_TIME");
        public final static Property StartTime = new Property(33, long.class, "startTime", false, "START_TIME");
        public final static Property StartAppStore = new Property(34, int.class, "startAppStore", false, "START_APP_STORE");
        public final static Property Position = new Property(35, int.class, "position", false, "POSITION");
        public final static Property DownloadStatus = new Property(36, int.class, "downloadStatus", false, "DOWNLOAD_STATUS");
        public final static Property DownloadProgress = new Property(37, int.class, "downloadProgress", false, "DOWNLOAD_PROGRESS");
    }


    public AdvertisementCardDao(DaoConfig config) {
        super(config);
    }
    
    public AdvertisementCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADVERTISEMENT_CARD\" (" + //
                "\"COL_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: colId
                "\"AID\" INTEGER NOT NULL ," + // 1: aid
                "\"EID\" TEXT," + // 2: eid
                "\"TID\" TEXT," + // 3: tid
                "\"ADS_FROM\" TEXT," + // 4: adsFrom
                "\"EX\" TEXT," + // 5: ex
                "\"CLICK_MONITOR_URLS_STR\" TEXT," + // 6: clickMonitorUrlsStr
                "\"VIEW_MONITOR_URLS_STR\" TEXT," + // 7: viewMonitorUrlsStr
                "\"DSP_NAME\" TEXT," + // 8: dspName
                "\"AD_MESSAGE\" TEXT," + // 9: adMessage
                "\"TEMPLATE\" INTEGER NOT NULL ," + // 10: template
                "\"EXTERNAL_APP\" INTEGER NOT NULL ," + // 11: externalApp
                "\"SHOW_SHARE\" INTEGER NOT NULL ," + // 12: showShare
                "\"PLAY_SOUND\" INTEGER NOT NULL ," + // 13: playSound
                "\"REPORT_EVENT\" INTEGER NOT NULL ," + // 14: reportEvent
                "\"AD_DURATION\" INTEGER NOT NULL ," + // 15: adDuration
                "\"IMAGE_URL\" TEXT," + // 16: imageUrl
                "\"LOCAL_IMAGE_FILE_PATH\" TEXT," + // 17: localImageFilePath
                "\"TYPE\" INTEGER NOT NULL ," + // 18: type
                "\"CLICK_URL\" TEXT," + // 19: clickUrl
                "\"AD_CHANNEL_ID\" TEXT," + // 20: adChannelId
                "\"AD_CHANNEL_NAME\" TEXT," + // 21: adChannelName
                "\"AD_CHANNEL_TYPE\" TEXT," + // 22: adChannelType
                "\"AD_CHANNEL_IMAGE\" TEXT," + // 23: adChannelImage
                "\"DOC_ID\" TEXT," + // 24: docId
                "\"DEEPLINK_URL\" TEXT," + // 25: deeplinkUrl
                "\"HYBRID_CONTENT_STRING\" TEXT," + // 26: hybridContentString
                "\"NET\" TEXT," + // 27: net
                "\"EVENT\" TEXT," + // 28: event
                "\"TIME\" INTEGER NOT NULL ," + // 29: time
                "\"PACKAGE_NAME\" TEXT," + // 30: packageName
                "\"DOWNLOAD_ID\" INTEGER NOT NULL ," + // 31: downloadId
                "\"EXPIRE_TIME\" INTEGER NOT NULL ," + // 32: expireTime
                "\"START_TIME\" INTEGER NOT NULL ," + // 33: startTime
                "\"START_APP_STORE\" INTEGER NOT NULL ," + // 34: startAppStore
                "\"POSITION\" INTEGER NOT NULL ," + // 35: position
                "\"DOWNLOAD_STATUS\" INTEGER NOT NULL ," + // 36: downloadStatus
                "\"DOWNLOAD_PROGRESS\" INTEGER NOT NULL );"); // 37: downloadProgress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADVERTISEMENT_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AdvertisementCard entity) {
        stmt.clearBindings();
 
        Long colId = entity.getColId();
        if (colId != null) {
            stmt.bindLong(1, colId);
        }
        stmt.bindLong(2, entity.getAid());
 
        String eid = entity.getEid();
        if (eid != null) {
            stmt.bindString(3, eid);
        }
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(4, tid);
        }
 
        String adsFrom = entity.getAdsFrom();
        if (adsFrom != null) {
            stmt.bindString(5, adsFrom);
        }
 
        String ex = entity.getEx();
        if (ex != null) {
            stmt.bindString(6, ex);
        }
 
        String clickMonitorUrlsStr = entity.getClickMonitorUrlsStr();
        if (clickMonitorUrlsStr != null) {
            stmt.bindString(7, clickMonitorUrlsStr);
        }
 
        String viewMonitorUrlsStr = entity.getViewMonitorUrlsStr();
        if (viewMonitorUrlsStr != null) {
            stmt.bindString(8, viewMonitorUrlsStr);
        }
 
        String dspName = entity.getDspName();
        if (dspName != null) {
            stmt.bindString(9, dspName);
        }
 
        String adMessage = entity.getAdMessage();
        if (adMessage != null) {
            stmt.bindString(10, adMessage);
        }
        stmt.bindLong(11, entity.getTemplate());
        stmt.bindLong(12, entity.getExternalApp());
        stmt.bindLong(13, entity.getShowShare());
        stmt.bindLong(14, entity.getPlaySound());
        stmt.bindLong(15, entity.getReportEvent());
        stmt.bindLong(16, entity.getAdDuration());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(17, imageUrl);
        }
 
        String localImageFilePath = entity.getLocalImageFilePath();
        if (localImageFilePath != null) {
            stmt.bindString(18, localImageFilePath);
        }
        stmt.bindLong(19, entity.getType());
 
        String clickUrl = entity.getClickUrl();
        if (clickUrl != null) {
            stmt.bindString(20, clickUrl);
        }
 
        String adChannelId = entity.getAdChannelId();
        if (adChannelId != null) {
            stmt.bindString(21, adChannelId);
        }
 
        String adChannelName = entity.getAdChannelName();
        if (adChannelName != null) {
            stmt.bindString(22, adChannelName);
        }
 
        String adChannelType = entity.getAdChannelType();
        if (adChannelType != null) {
            stmt.bindString(23, adChannelType);
        }
 
        String adChannelImage = entity.getAdChannelImage();
        if (adChannelImage != null) {
            stmt.bindString(24, adChannelImage);
        }
 
        String docId = entity.getDocId();
        if (docId != null) {
            stmt.bindString(25, docId);
        }
 
        String deeplinkUrl = entity.getDeeplinkUrl();
        if (deeplinkUrl != null) {
            stmt.bindString(26, deeplinkUrl);
        }
 
        String hybridContentString = entity.getHybridContentString();
        if (hybridContentString != null) {
            stmt.bindString(27, hybridContentString);
        }
 
        String net = entity.getNet();
        if (net != null) {
            stmt.bindString(28, net);
        }
 
        String event = entity.getEvent();
        if (event != null) {
            stmt.bindString(29, event);
        }
        stmt.bindLong(30, entity.getTime());
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(31, packageName);
        }
        stmt.bindLong(32, entity.getDownloadId());
        stmt.bindLong(33, entity.getExpireTime());
        stmt.bindLong(34, entity.getStartTime());
        stmt.bindLong(35, entity.getStartAppStore());
        stmt.bindLong(36, entity.getPosition());
        stmt.bindLong(37, entity.getDownloadStatus());
        stmt.bindLong(38, entity.getDownloadProgress());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AdvertisementCard entity) {
        stmt.clearBindings();
 
        Long colId = entity.getColId();
        if (colId != null) {
            stmt.bindLong(1, colId);
        }
        stmt.bindLong(2, entity.getAid());
 
        String eid = entity.getEid();
        if (eid != null) {
            stmt.bindString(3, eid);
        }
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(4, tid);
        }
 
        String adsFrom = entity.getAdsFrom();
        if (adsFrom != null) {
            stmt.bindString(5, adsFrom);
        }
 
        String ex = entity.getEx();
        if (ex != null) {
            stmt.bindString(6, ex);
        }
 
        String clickMonitorUrlsStr = entity.getClickMonitorUrlsStr();
        if (clickMonitorUrlsStr != null) {
            stmt.bindString(7, clickMonitorUrlsStr);
        }
 
        String viewMonitorUrlsStr = entity.getViewMonitorUrlsStr();
        if (viewMonitorUrlsStr != null) {
            stmt.bindString(8, viewMonitorUrlsStr);
        }
 
        String dspName = entity.getDspName();
        if (dspName != null) {
            stmt.bindString(9, dspName);
        }
 
        String adMessage = entity.getAdMessage();
        if (adMessage != null) {
            stmt.bindString(10, adMessage);
        }
        stmt.bindLong(11, entity.getTemplate());
        stmt.bindLong(12, entity.getExternalApp());
        stmt.bindLong(13, entity.getShowShare());
        stmt.bindLong(14, entity.getPlaySound());
        stmt.bindLong(15, entity.getReportEvent());
        stmt.bindLong(16, entity.getAdDuration());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(17, imageUrl);
        }
 
        String localImageFilePath = entity.getLocalImageFilePath();
        if (localImageFilePath != null) {
            stmt.bindString(18, localImageFilePath);
        }
        stmt.bindLong(19, entity.getType());
 
        String clickUrl = entity.getClickUrl();
        if (clickUrl != null) {
            stmt.bindString(20, clickUrl);
        }
 
        String adChannelId = entity.getAdChannelId();
        if (adChannelId != null) {
            stmt.bindString(21, adChannelId);
        }
 
        String adChannelName = entity.getAdChannelName();
        if (adChannelName != null) {
            stmt.bindString(22, adChannelName);
        }
 
        String adChannelType = entity.getAdChannelType();
        if (adChannelType != null) {
            stmt.bindString(23, adChannelType);
        }
 
        String adChannelImage = entity.getAdChannelImage();
        if (adChannelImage != null) {
            stmt.bindString(24, adChannelImage);
        }
 
        String docId = entity.getDocId();
        if (docId != null) {
            stmt.bindString(25, docId);
        }
 
        String deeplinkUrl = entity.getDeeplinkUrl();
        if (deeplinkUrl != null) {
            stmt.bindString(26, deeplinkUrl);
        }
 
        String hybridContentString = entity.getHybridContentString();
        if (hybridContentString != null) {
            stmt.bindString(27, hybridContentString);
        }
 
        String net = entity.getNet();
        if (net != null) {
            stmt.bindString(28, net);
        }
 
        String event = entity.getEvent();
        if (event != null) {
            stmt.bindString(29, event);
        }
        stmt.bindLong(30, entity.getTime());
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(31, packageName);
        }
        stmt.bindLong(32, entity.getDownloadId());
        stmt.bindLong(33, entity.getExpireTime());
        stmt.bindLong(34, entity.getStartTime());
        stmt.bindLong(35, entity.getStartAppStore());
        stmt.bindLong(36, entity.getPosition());
        stmt.bindLong(37, entity.getDownloadStatus());
        stmt.bindLong(38, entity.getDownloadProgress());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AdvertisementCard readEntity(Cursor cursor, int offset) {
        AdvertisementCard entity = new AdvertisementCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // colId
            cursor.getLong(offset + 1), // aid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // eid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // adsFrom
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // clickMonitorUrlsStr
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // viewMonitorUrlsStr
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dspName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // adMessage
            cursor.getInt(offset + 10), // template
            cursor.getInt(offset + 11), // externalApp
            cursor.getInt(offset + 12), // showShare
            cursor.getInt(offset + 13), // playSound
            cursor.getInt(offset + 14), // reportEvent
            cursor.getInt(offset + 15), // adDuration
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // imageUrl
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // localImageFilePath
            cursor.getInt(offset + 18), // type
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // clickUrl
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // adChannelId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // adChannelName
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // adChannelType
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // adChannelImage
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // docId
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // deeplinkUrl
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // hybridContentString
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // net
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // event
            cursor.getLong(offset + 29), // time
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // packageName
            cursor.getLong(offset + 31), // downloadId
            cursor.getLong(offset + 32), // expireTime
            cursor.getLong(offset + 33), // startTime
            cursor.getInt(offset + 34), // startAppStore
            cursor.getInt(offset + 35), // position
            cursor.getInt(offset + 36), // downloadStatus
            cursor.getInt(offset + 37) // downloadProgress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AdvertisementCard entity, int offset) {
        entity.setColId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAid(cursor.getLong(offset + 1));
        entity.setEid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAdsFrom(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEx(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClickMonitorUrlsStr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setViewMonitorUrlsStr(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDspName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAdMessage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTemplate(cursor.getInt(offset + 10));
        entity.setExternalApp(cursor.getInt(offset + 11));
        entity.setShowShare(cursor.getInt(offset + 12));
        entity.setPlaySound(cursor.getInt(offset + 13));
        entity.setReportEvent(cursor.getInt(offset + 14));
        entity.setAdDuration(cursor.getInt(offset + 15));
        entity.setImageUrl(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLocalImageFilePath(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setType(cursor.getInt(offset + 18));
        entity.setClickUrl(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAdChannelId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAdChannelName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAdChannelType(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setAdChannelImage(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDocId(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setDeeplinkUrl(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setHybridContentString(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setNet(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setEvent(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setTime(cursor.getLong(offset + 29));
        entity.setPackageName(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setDownloadId(cursor.getLong(offset + 31));
        entity.setExpireTime(cursor.getLong(offset + 32));
        entity.setStartTime(cursor.getLong(offset + 33));
        entity.setStartAppStore(cursor.getInt(offset + 34));
        entity.setPosition(cursor.getInt(offset + 35));
        entity.setDownloadStatus(cursor.getInt(offset + 36));
        entity.setDownloadProgress(cursor.getInt(offset + 37));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AdvertisementCard entity, long rowId) {
        entity.setColId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AdvertisementCard entity) {
        if(entity != null) {
            return entity.getColId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AdvertisementCard entity) {
        return entity.getColId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
